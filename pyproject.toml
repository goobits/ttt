[tool.poetry]
name = "goobits-ttt"
version = "1.0.0rc3"
description = "The Unified AI Library - A single, elegant interface for local and cloud AI models"
authors = ["Goobits Team <team@goobits.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/goobits/ai"
repository = "https://github.com/goobits/ai"
documentation = "https://docs.goobits.com/ai"
keywords = ["ai", "llm", "openai", "anthropic", "google", "ollama", "chatgpt", "claude", "gemini"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "ttt"}]

[tool.poetry.dependencies]
python = "^3.8"
pydantic = "^2.0.0"
litellm = "^1.0.0"
rich = "^13.0.0"
click = "^8.0.0"
python-dotenv = "^1.0.0"
pyyaml = "^6.0"
bleach = "^6.0.0"
validators = "^0.22.0"

[tool.poetry.extras]
local = ["httpx"]

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.0.0"
black = "^23.0.0"
ruff = "^0.1.0"
mypy = "^1.5.0"
pre-commit = "^3.0.0"
sphinx = "^7.0.0"
sphinx-rtd-theme = "^1.3.0"

[tool.poetry.scripts]
goobits-ttt = "ttt.cli:cli_entry"  # TTT - Text-to-Text processing (branded name)
ttt = "ttt.cli:cli_entry"          # TTT - Text-to-Text processing (convenient alias)

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as performance benchmarks",
    "examples: marks tests as usage examples",
    "real_api: marks tests that make real API calls",
    "asyncio: marks tests as async tests",
]

[tool.coverage.run]
source = ["ttt"]
omit = [
    "*/tests/*",
    "*/test_*",
    "ttt/cli.py",  # CLI is tested separately
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]